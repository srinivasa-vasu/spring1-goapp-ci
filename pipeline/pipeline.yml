---
clair_scan_params: &clair_scan_params
  CLAIR_URL: {{CLAIR_URL}}
  CLAIR_PORT: {{CLAIR_PORT}}
  CLAIR_HEALTH_PORT: {{CLAIR_HEALTH_PORT}}
  CLAIR_IMAGE: {{APP_REPO_IMAGE}}
  CLAIR_INSECURE_REGISTRY: {{REPO_INSECURE_REGISTRY}}
  HARBOR_USERNAME: {{HARBOR_USERNAME}}
  HARBOR_PASSWORD: {{HARBOR_PASSWORD}}

notary_sign_params: &notary_sign_params
  HARBOR_URL: {{HARBOR_URL}}
  HARBOR_IMAGE: {{APP_REPO_IMAGE}}
  HARBOR_USERNAME: {{HARBOR_USERNAME}}
  HARBOR_PASSWORD: {{HARBOR_PASSWORD}}
  HARBOR_CA_CERT: {{HARBOR_CA_CERT}}
  NOTARY_ROOT_PASS: {{NOTARY_ROOT_PASS}}
  NOTARY_REPO_PASS: {{NOTARY_REPO_PASS}}

groups:
- name: HARBOR-FLOW
  jobs:
  - build-docker-image
  - cve-scan-harbor-image
  - sign-harbor-image

- name: K8S-FLOW
  jobs:
  - k8s-deployment


resource_types:
- name: k8s
  type: docker-image
  source:
    repository: srinivasavasu/concourse-k8s

resources:
- name: git-src-repo
  type: git
  source:
    uri: https://github.com/srinivasa-vasu/spring1-goapp-ci.git
    branch: master

- name: git-go-http
  type: git
  source:
    #uri: https://github.com/tkrausjr/go-http
    uri: https://github.com/srinivasa-vasu/spring-music
    branch: master

- name: harbor-image
  type: docker-image
  source:
    username: {{HARBOR_USERNAME}}
    password: {{HARBOR_PASSWORD}}
    repository: {{REPO_URL}}
    tag: {{APP_TAG_VERSION}}
    insecure_registries:
    - {{REPO_INSECURE_REGISTRY}}
    ca_certs: {{HARBOR_CA_CERT}}
    
- name: kubernetes-deployment
  type: k8s
  source:
    cluster_url: {{K8S_CLUSTER_URL}}
    namespace: {{K8S_NAMESPACE}}
    cluster_ca: {{K8S_CA_BASE64}}
    admin_user: {{K8S_ADMIN_USER}}
    admin_token: {{K8S_ADMIN_TOKEN}}
#- name: kubernetes-service
#  type: kubernetes
#  source:
#    cluster_url: {{K8S_CLUSTER_URL}}
#    #namespace: {{K8S_NAMESPACE}}
#    cluster_ca: {{K8S_CA_BASE64}}
#    admin_user: {{K8S_ADMIN_USER}}
#    admin_token: {{K8S_ADMIN_TOKEN}}
#    resource_type: service
#    resource_name: spring-music
#    resource_port: 8080
#    overwrite: true

jobs:
- name: build-docker-image
  public: true
  serial: true
  plan:
  - aggregate:
    - get: git-src-repo
      trigger: true
    - get: git-go-http
      trigger: true
  - put: harbor-image
    params:
      build: git-go-http

- name: cve-scan-harbor-image
  plan:
  - aggregate:
    - get: git-src-repo
    - get: harbor-image
      passed: [build-docker-image]
      trigger: true
  - task: clair-scan-image
    file: git-src-repo/tasks/clair-scan-image/task.yml
    params: *clair_scan_params

- name: sign-harbor-image
  plan:
  - aggregate:
    - get: git-src-repo  
    - get: harbor-image
      passed: [cve-scan-harbor-image]
      trigger: true
  - task: notary-sign-image
    privileged: true
    file: git-src-repo/tasks/notary-sign-image/task.yml
    params: *notary_sign_params

- name: k8s-deployment
  public: true
  serial: true
  plan:
  - get: harbor-image
    passed: [cve-scan-harbor-image]
    trigger: true
  - put: kubernetes-deployment
    params:
      resource_type: deployment
      resource_name: spring-music
      image_name: {{REPO_URL}}
      image_tag: {{APP_TAG_VERSION}}
#      env_values:
#      - name: SPRING_PROFILES_ACTIVE
#        value: prod
#      - name: SPRING_DATA_MONGODB_DATABASE
#        value: app1
#      - name: SPRING_DATA_MONGODB_URI
#        value: "mongodb://app1-mongodb-0.app1-mongodb.bbase:27017"
#      - name: JAVA_OPTS
#        value: " -Xmx256m -Xms256m"
#      command:
#      - "/bin/sh"
#      - "-c"
#      - "echo 'hello thr'"
      port_values:
      - name: web
        containerPort: "8080"
#      readiness_probe:
#        httpGet:
#          path: /management/health
#          port: web
#  - put: kubernetes-deployment
#    params:
#      resource_type: configmap
#      resource_name: spring-music
#      config_data:
#        game-properties-file-name: game.properties
#        game.properties: |
#          enemies=aliens
#          lives=3
  - put: kubernetes-deployment
    params:
      resource_type: service
      resource_name: spring-music
      port_values:
      - name: web
        port: "8080"
        targetPort: "8080"
            